// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id             Int              @id @default(autoincrement())
  username       String           @unique
  email          String           @unique
  password       String
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  role           Role             @default(USER)
  statistics     Statistics[]
  achievements   Achievement[]
  enrolledCourse EnrolledCourse[]

  @@map("users")
}

model Report {
  id         Int      @id @default(autoincrement())
  quiz       Quiz     @relation(fields: [quizId], references: [id])
  quizId     Int
  issue      String
  detail     String
  screenshot String?
  createdAt  DateTime @default(now()) @map("created_at")
  isResolved Boolean  @default(false)
}

model EnrolledCourse {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  course     Course   @relation(fields: [courseId], references: [id])
  courseId   Int
  enrolledAt DateTime @default(now()) @map("enrolled_at")

  @@map("enrolled_courses")
}

model Course {
  id             Int              @id @default(autoincrement())
  title          String
  description    String?
  lessons        Lesson[]
  enrolledCourse EnrolledCourse[]

  @@map("courses")
}

model Lesson {
  id          Int     @id @default(autoincrement())
  title       String
  description String?
  course      Course  @relation(fields: [courseId], references: [id])
  courseId    Int     @map("course_id")
  quizzes     Quiz[]

  @@map("lessons")
}

model Quiz {
  id        Int         @id @default(autoincrement())
  title     String
  questions Questions[]
  lesson    Lesson      @relation(fields: [lessonId], references: [id])
  lessonId  Int
  reports   Report[]
}

model Statistics {
  id                 Int  @id @default(autoincrement())
  correct_answered   Int
  incorrect_answered Int
  exp                Int
  user               User @relation(fields: [userId], references: [id])
  userId             Int  @map("user_id")

  @@map("statistics")
}

model Questions {
  id             Int    @id @default(autoincrement())
  question       String
  correct_answer String
  quiz           Quiz   @relation(fields: [quizId], references: [id])
  quizId         Int    @map("quiz_id")

  @@map("questions")
}

model Achievement {
  id     Int    @id @default(autoincrement())
  title  String
  user   User   @relation(fields: [userId], references: [id])
  userId Int
}
